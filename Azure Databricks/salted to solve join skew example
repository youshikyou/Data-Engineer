sc.setJobDescription("Step F-1: Salted-Skew, saltDF")

spark.conf.set("spark.sql.adaptive.enabled", false)
spark.conf.set("spark.sql.adaptive.skewedJoin.enabled", false)

// Too large - unnecissary overhead in the join and crossjoin
// Too small - skewed partition is not split up enough
// This value was selected after much experimentation
val skewFactor = 7

val saltDF = spark.range(skewFactor).toDF("salt")

sc.setJobDescription("Step F-2: Salted-Skew, ctySaltedDF")

// Post cross-join, we will be at ~865 MB (experimentation - see exchagne data size)
// 128 MB is Spark's safe, default partion size.
val partitions = Math.ceil(865 / 128d).toInt 

val ctySaltedDF = spark
  .read.format("delta").load(ctyPath)                // Load the delta table
  .repartition(partitions)                           // Pre-emptively avoiding spill post cross-join
  .crossJoin(saltDF)                                 // Cross join with saltDF
  .withColumn("salted_city_id",                      // Add the new column "salted_city_id"
              concat($"city_id", lit("_"), $"salt")) // Concatinate "city_id" and "salt"
  .drop("salt")                                      // Drop the now unused column "salt"

ctySaltedDF.printSchema

sc.setJobDescription("Step F-3: Salted-Skew, trxSaltedDF")

val trxSaltedDF = spark
  .read.format("delta").load(trxPath)                         // Load the delta table
  .withColumn("salt", (lit(skewFactor) * rand()).cast("int")) // Create a random "salt" column
  .withColumn("salted_city_id",                               // Add the new column "salted_city_id"
              concat(col("city_id"), lit("_"), col("salt")))  // Concatinate "city_id" and "salt"
  .drop("salt")                                               // Drop the now unused column "salt"

trxSaltedDF.printSchema

sc.setJobDescription("Step F-4: Salted-Skew, the join")

trxSaltedDF
  .join(ctySaltedDF, ctySaltedDF("salted_city_id") === trxSaltedDF("salted_city_id")) // Join by salted_city_id
  .write.format("noop").mode("overwrite").save()    
